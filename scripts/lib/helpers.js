const path = require('path');

const hookDir = path.join(__dirname, '../../src/hooks');
const docsDir = path.join(__dirname, '../../docs');
const testsDir = path.join(__dirname, '../../tests/hooks');
const boilerplatesDir = path.join(__dirname, '../boilerplates');

const docContentBreakPoint = '<!-- Generated by documentation.js. Update this documentation by updating the source code. -->';

const hookFile = file => `${hookDir}/${file}`;
const docFile = file => `${docsDir}/${file}.md`;
const testFile = file => `${testsDir}/${file}.test.js`;
const boilerplateFile = file => `${boilerplatesDir}/${file}.boilerplate`;

const removeExt = file => file.slice(0,-3);
const createHookNameID = name => `use-${name.split('use')[1].toLowerCase()}`;

const createHookRefs = file => ({
  name: removeExt(file),
  id: createHookNameID(removeExt(file)),
  js: hookFile(file),
  md: docFile(removeExt(file)),
  test: testFile(removeExt(file))
});

const getHookInfo = fileRef => ({
  ...fileRef,
  author: 'Thiago Alves',
  email: 'taltk9@gmail.com'
});

const isValidFile = file => file.indexOf('use') !== -1 && file.indexOf('.js') !== -1;

const replaceBoilerplateVariables = (string = '', obj = {}) => {
  return string
    .replace(new RegExp('<%=HOOK_NAME%>', 'gi'), obj.name)
    .replace(new RegExp('<%=HOOK_ID%>', 'gi'), obj.id)
    .replace(new RegExp('<%=HOOK_AUTHOR_NAME%>', 'gi'), obj.author)
    .replace(new RegExp('<%=HOOK_AUTHOR_EMAIL%>', 'gi'), obj.email);
};

module.exports = {
  hookDir,
  docsDir,
  boilerplatesDir,
  docContentBreakPoint,
  hookFile,
  docFile,
  boilerplateFile,
  removeExt,
  createHookNameID,
  createHookRefs,
  getHookInfo,
  isValidFile,
  replaceBoilerplateVariables
};
